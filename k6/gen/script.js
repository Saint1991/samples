/*
 * typebook
 * Schema Registry for Avro with MySQL backend
 *
 * OpenAPI spec version: 0.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 7.2.0-SNAPSHOT
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "http://localhost:8080/typebook";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.

export default function() {
    group("/config/{subject}", () => {
        let subject = 'e-commerce'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getConfig
        {
            let url = BASE_URL + `/config/${subject}`;
            let request = http.get(url);

            check(request, {
                "configurations": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: deleteConfig
        {
            let url = BASE_URL + `/config/${subject}`;
            let request = http.del(url);

            check(request, {
                "0 if configuration is actually deleted or 1 otherwise": (r) => r.status === 200
            });
        }
    });

    group("/subjects", () => {

        // Request No. 1: getAllSubjects
        {
            let url = BASE_URL + `/subjects`;
            let request = http.get(url);

            check(request, {
                "All subject names registered in this registry": (r) => r.status === 200
            });
        }
    });

    group("/subjects/{subject}/schema/lookup", () => {
        let subject = 'e-commerce'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: lookupSchemaByDefinition
        {
            let url = BASE_URL + `/subjects/${subject}/schema/lookup`;
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, params);

            check(request, {
                "If the posted schema has already existed, return the latest schema information.": (r) => r.status === 200
            });
        }
    });

    group("/schemas/ids/{id}", () => {
        let id = '1'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getSchemaById
        {
            let url = BASE_URL + `/schemas/ids/${id}`;
            let request = http.get(url);

            check(request, {
                "schema definition": (r) => r.status === 200
            });
        }
    });

    group("/subjects/{subject}/versions/{version}", () => {
        let subject = 'e-commerce'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let version = 'v1.0.0'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getSchemaByVersion
        {
            let url = BASE_URL + `/subjects/${subject}/versions/${version}`;
            let request = http.get(url);

            check(request, {
                "schema definition": (r) => r.status === 200
            });
        }
    });

    group("/subjects/{subject}", () => {
        let subject = 'e-commerce'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getSubject
        {
            let url = BASE_URL + `/subjects/${subject}`;
            let request = http.get(url);

            check(request, {
                "a specific subject with the given name": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: 
        {
            let url = BASE_URL + `/subjects/${subject}`;
            let request = http.del(url);

            check(request, {
                "0 if a subject actually deleted or 1 otherwise.": (r) => r.status === 200
            });
        }
    });

    group("/config/{subject}/properties/{property}", () => {
        let subject = 'e-commerce'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let property = 'compatibility'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getProperty
        {
            let url = BASE_URL + `/config/${subject}/properties/${property}`;
            let request = http.get(url);

            check(request, {
                "successful or not": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: deleteProperty
        {
            let url = BASE_URL + `/config/${subject}/properties/${property}`;
            let request = http.del(url);

            check(request, {
                "0 if configuration is successfully registered or 1 otherwise": (r) => r.status === 200
            });
        }
    });

    group("/subjects/{subject}/schema/lookupAll", () => {
        let subject = 'e-commerce'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: lookupAllSchemasByDefinition
        {
            let url = BASE_URL + `/subjects/${subject}/schema/lookupAll`;
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, params);

            check(request, {
                "a list of schemas": (r) => r.status === 200
            });
        }
    });

    group("/compatibility/subjects/{subject}/versions/{version}", () => {
        let subject = 'e-commerce'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let version = 'v1.0.0'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: checkSchemaCompatibility
        {
            let url = BASE_URL + `/compatibility/subjects/${subject}/versions/${version}`;
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, params);

            check(request, {
                "verifying result": (r) => r.status === 200
            });
        }
    });

    group("/subjects/{subject}/versions", () => {
        let subject = 'e-commerce'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: getSchemaVersions
        {
            let url = BASE_URL + `/subjects/${subject}/versions`;
            let request = http.get(url);

            check(request, {
                "the registered versions": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: registerSchema
        {
            let url = BASE_URL + `/subjects/${subject}/versions`;
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, params);

            check(request, {
                "ID for the posted schema when it is the same as the latest schema.": (r) => r.status === 200
            });
            check(request, {
                "ID for the registered schema": (r) => r.status === 201
            });
        }
    });

}
